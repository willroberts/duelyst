/* eslint-disable
    class-methods-use-this,
    import/no-unresolved,
    max-len,
    no-mixed-spaces-and-tabs,
    no-param-reassign,
    no-return-assign,
    no-tabs,
    no-underscore-dangle,
*/
// TODO: This file was created by bulk-decaffeinate.
// Fix any style issues and re-enable lint.
/*
 * decaffeinate suggestions:
 * DS102: Remove unnecessary code created because of implicit returns
 * DS206: Consider reworking classes to avoid initClass
 * DS207: Consider shorter variations of null checks
 * Full docs: https://github.com/decaffeinate/decaffeinate/blob/main/docs/suggestions.md
 */
const GameStatus = require('app/sdk/gameStatus');
const GameType = require('app/sdk/gameType');

class Quest {
  static initClass() {
    this.prototype.id = null; // integer generated by quest factory and used for lookup
    this.prototype.types = null; // array of values from QuestType
    this.prototype.name = null; // player visible name of quest
    this.prototype.goldReward = undefined; // gold reward for completion of quest
    this.prototype.spiritOrbsReward = undefined; // spirit orb count reward for completion of quest
    this.prototype.params = null; // object of properties that get saved to firebase e.g. completion progress
    this.prototype.requiresStreak = undefined; // if a quest requires a streak, all progress will reset if a game completes without making progress
    this.prototype.friendlyMatchesCount = undefined;
    this.prototype.riftMatchesCount = undefined;
    this.prototype.isReplaceable = true;
		 // can this quest type be replaced
  }

  constructor(id, name, typesIn, goldReward) {
    this.id = id;
    this.name = name;
    this.types = typesIn;
    this.params = {};
    this.goldReward = goldReward;
    this.friendlyMatchesCount = false;
    this.riftMatchesCount = true;
  }

  // returns the amount of progress made in a given gameData, should always check if game is over
  // gameData - a parsed representation of serialized gamesession data
  progressForGameDataForPlayerId(gameData, playerId) {
    // Can only make progress in a completed game
    if (gameData.status !== GameStatus.over) {
      return 0;
    }

    // don't make progress if this game didn't count based on being friendly
    if ((gameData.gameType === GameType.Friendly) && !this.friendlyMatchesCount) {
      return 0;
    }

    // don't make progress if this game didn't count based on being rift mode
    if ((gameData.gameType === GameType.Rift) && !this.riftMatchesCount) {
      return 0;
    }

    return this._progressForGameDataForPlayerId(gameData, playerId);
  }

  // Returns progress based on a passed in faction's stats (assumes this faction leveled)
  progressForProgressedFactionData(progressedFactionData) {
    return 0;
  }

  // Returns progress for completing the passed in challenge id
  progressForChallengeId(challengeId) {
    return 0;
  }

  // Subclasses should override this to return how much progress is made for completing a quest
  _progressForGameDataForPlayerId(gameData, playerId) {
    // override: calculate if this quest is satisfied by a game session for a player
    return 0;
  }

  // Subclasses should override this to return how much progress is made for completing a quest
  progressForQuestCompletion(questData) {
    return 0;
  }

  getId() {
    return this.id;
  }

  getName() {
    return this.name;
  }

  getTypes() {
    return this.types;
  }

  getDescription() {
    return 'N/A';
  }

  getGoldReward() {
    return this.goldReward;
  }

  getSpiritOrbsReward() {
    return this.spiritOrbsReward;
  }

  getIsReplaceable() {
    return this.isReplaceable;
  }

  setRequiresStreak(requiresStreak) {
    if (requiresStreak == null) { requiresStreak = true; }
    return this.requiresStreak = requiresStreak;
  }

  getRequiresStreak() {
    return this.requiresStreak || false;
  }

  setFriendlyMatchesCount(friendlyMatchesCount) {
    if (friendlyMatchesCount == null) { friendlyMatchesCount = true; }
    return this.friendlyMatchesCount = friendlyMatchesCount;
  }

  getFriendlyMatchesCount() {
    return this.friendlyMatchesCount;
  }

  shouldResetProgress(gameData, progressMade) {
    // don't reset progress if this game didn't count based on being friendly
    if ((gameData.gameType === GameType.Friendly) && !this.friendlyMatchesCount) {
      return false;
    }

    // don't reset progress if game isn't over
    if (gameData.status !== GameStatus.over) {
      return false;
    }

    // If quest requires a streak, but no progress was made reset current progress
    if (this.requiresStreak && (progressMade === 0)) {
      return true;
    }

    return false;
  }

  // Used for seasonal and promo quests to determine if a quest is currently active
  // Override in subclasses
  isAvailableOn(momentUtc) {
    return true;
  }
}
Quest.initClass();

module.exports = Quest;
